pi_bar_k[,k] <- sscp_fit$pi
# update j^{th} scale parameters
lambda_bar_k[1:T,k] <- lambda_bar_fn(u_bar_k[,k], v_bar_k[,k], pi_bar_k[,k])
if (B_r > 0) lambda_bar_k[tail,k] <- lambda_bar_k[T,k]
# update residual terms
lambda_bar <- lambda_bar * lambda_bar_k[,k] # multiplying back lambda_k
}
if (conv_crit == "l2") new_params <- c(new_params, pi_bar_k, v_bar_k)
}
# updating mu_0 and lambda_0
r_tilde <- r_tilde + mu_0
lambda_bar <- lambda_bar / lambda_0
if (fit.intercept) {
mu_0 <- (sum(y_0) + sum(lambda_bar * r_tilde)) / (B_l + sum(lambda_bar))
if (conv_crit == "l2") new_params <- c(new_params, mu_0)
}
if (fit.scale){
lambda_0 <- (T + B_l + B_r) / (sum((y_0 - mu_0)^2) + sum(lambda_bar * (r_tilde - mu_0)^2 + delta))
if (conv_crit == "l2") new_params <- c(new_params, lambda_0)
}
r_tilde <- r_tilde - mu_0
lambda_bar <- lambda_bar * lambda_0
# calculate ELBO (up to constant)
elbo <- ((T + B_l + B_r) * log(lambda_0) - sum(lambda_0 * (y_0 - mu_0)^2) - sum(lambda_bar * (r_tilde^2 + delta))) / 2
if (J > 0) {
elbo <- elbo + sum((T+B_r):(1+B_r) * rowSums((digamma(u_bar_j) - log(v_bar_j)) * pi_bar_j)) / 2
# need special care for log odds when prob is near zero
log_odds <- log(pi_j) - log(pi_bar_j)
log_odds[round(pi_bar_j, 10) == 0] <- 0
# E[log p - log q]
# variance component
log_pq_var <- (u_j - u_bar_j) * digamma(u_bar_j)  + u_j * log(v_bar_j) + lgamma(u_bar_j) + u_bar_j * (1 - v_j / v_bar_j)
# mean component
log_pq_mean <- tau_j * (b_bar_j^2 * u_bar_j / v_bar_j + 1 / tau_bar_j) + log(tau_bar_j)
log_pq <- log_odds - log_pq_mean / 2 + log_pq_var
elbo <- elbo + sum(pi_bar_j * log_pq)
}
if (L > 0) {
# need special care for log odds when prob is near zero
log_odds <- log(pi_l) - log(pi_bar_l)
log_odds[round(pi_bar_l, 10) == 0] <- 0
# E[log p - log q]
log_pq <- log_odds - (tau_l * (b_bar_l^2 + 1 / tau_bar_l) + log(tau_bar_l)) / 2
elbo <- elbo + sum(pi_bar_l * log_pq)
}
if (K > 0) {
elbo <- elbo + sum((T+B_r):(1+B_r) * rowSums((digamma(u_bar_k) - log(v_bar_k) ) * pi_bar_k)) / 2
# need special care for log odds when prob is near zero
log_odds <- log(pi_k) - log(pi_bar_k)
log_odds[round(pi_bar_k, 10) == 0] <- 0
# E[log p - log q]
log_pq <- log_odds + (u_k - u_bar_k) * digamma(u_bar_k)  + u_k * log(v_bar_k) + lgamma(u_bar_k) + u_bar_k * (1 - v_k / v_bar_k)
elbo <- elbo + sum(pi_bar_k * log_pq)
}
# l2 convergence check
if (conv_crit == "l2") {
error <- sqrt(sum((params - new_params)^2))
params <- new_params
}
# elbo convergence check
elbo_track[iter+1] <- elbo
if (conv_crit == "ELBO") {
error <- elbo - elbo_track[iter]
}
if (error < tol) break
if (verbose & iter %% 1 == 0) print(paste0("Iteration ", iter,", Error: ", error))
}
# reassemble y
if (B_l > 0) {
y <- c(y_0, y)
}
# construct mean signal
mu <- rep(mu_0, T)
if (J > 0) mu <- mu + rowSums(apply(b_bar_j * pi_bar_j, 2, cumsum))
if (L > 0) mu <- mu + rowSums(apply(b_bar_l * pi_bar_l, 2, cumsum))
mu <- c(rep(mu_0, B_l), mu, rep(mu[T], B_r))
# construct scale signal
lambda_bar <- c(rep(lambda_0, B_l), lambda_bar)
ret <- list(y = y, mu = mu, lambda = lambda_bar,
J = J, K = K, L = L,
elbo = elbo_track[1:iter+1], converged = (max_iter > iter))
if (fit.intercept) ret$mu_0 <- mu_0
if (fit.scale) ret$lambda_0 <- lambda_0
if (J > 0) {
ret$mean.scale.model <- list(b = b_bar_j, tau = tau_bar_j,
u = u_bar_j, v = v_bar_j,
probs = rbind(matrix(0, ncol = J, nrow = B_l),
pi_bar_j,
matrix(0, ncol = J, nrow = B_r)))
}
if (L > 0) {
ret$mean.model <- list(b = b_bar_l, tau = tau_bar_l,
probs = rbind(matrix(0, ncol = L, nrow = B_l),
pi_bar_l,
matrix(0, ncol = L, nrow = B_r)))
}
if (K > 0) {
ret$scale.model <- list(u = u_bar_k, v = v_bar_k,
probs = rbind(matrix(0, ncol = K, nrow = B_l),
pi_bar_k,
matrix(0, ncol = K, nrow = B_r)))
}
return(ret)
}
Rcpp::sourceCpp("Desktop/SUPR/mich.cpp")
Rcpp::sourceCpp("Desktop/SUPR/mich.cpp")
mich(y, J, L, K,
B_l, B_r, fit_intercept, fit_scale, max_iter, verbose = FALSE,
tau_j, u_j, v_j, pi_j,
tau_l, pi_l,
u_k, v_k, pi_k),
mich(y, J, L, K,
B_l, B_r, fit_intercept, fit_scale, max_iter, verbose = FALSE,
tau_j, u_j, v_j, pi_j,
tau_l, pi_l,
u_k, v_k, pi_k),
microbenchmark(
mich(y, J, L, K,
B_l, B_r, fit_intercept, fit_scale, max_iter, verbose = FALSE,
tau_j, u_j, v_j, pi_j,
tau_l, pi_l,
u_k, v_k, pi_k),
michR(y, J, L, K, max_iter = max_iter, tol = -1))
Rcpp::sourceCpp("Desktop/SUPR/mich.cpp")
T = 100; B_l = 1; B_r = 1;
lambda = 1 / sqrt(c(rep(1, 50), rep(4, 33), rep(0.25, 36)))
mu = c(rep(0, 33), rep(4, 33), rep(1, 36))
y = rnorm(T+B_r+B_l, mean = mu, sd = lambda); J = 0; L = 2; K = 2;
fit_intercept = FALSE; fit_scale = FALSE; max_iter = 10000;
tau_j = rep(0.1, J); u_j = tau_j; v_j = u_j; pi_j = matrix(1/T, T, J);
tau_l = rep(0.1, L); pi_l = matrix(1/T, T, L);
u_k = rep(0.1, K); v_k = u_k; pi_k = matrix(1/T, T, K);
fit = mich(y, J, L, K,
B_l, B_r, fit_intercept, fit_scale,
max_iter, verbose = TRUE,
tau_j, u_j, v_j, pi_j,
tau_l, pi_l,
u_k, v_k, pi_k)
matplot(fit$J_model$pi)
matplot(fit$L_model$pi)
tmp=michR(y, J, L, K, fit.intercept = FALSE, fit.scale = FALSE, max_iter = max_iter, tol = -Inf)
matplot(tmp$mean.model$probs)
tmp=michR(y, J, L, K, fit.intercept = FALSE, fit.scale = FALSE, max_iter = max_iter, tol = -Inf, B_l = B_l, B_r=B_r)
matplot(fit$L_model$pi)
matplot(tmp$mean.model$probs)
plot(tmp$mean.model$probs[,1])
points(fit$L_model$pi[,1])
dim(fit$L_model$pi[,1])
length(fit$L_model$pi[,1])
length(tmp$mean.model$probs[,1])
plot(tmp$mean.model$probs[,1])
points(c(rep(0,B_l), fit$L_model$pi[,1]), rep(0,B_r))
points(c(rep(0,B_l), fit$L_model$pi[,1], rep(0,B_r)))
plot(tmp$mean.model$probs[,1])
points(c(rep(0,B_l), fit$L_model$pi[,1], rep(0,B_r)),col ="red")
plot(tmp$mean.model$probs[,2])
points(c(rep(0,B_l), fit$L_model$pi[,2], rep(0,B_r)),col ="red")
plot(tmp$scale.model$probs[,1])
points(c(rep(0,B_l), fit$K_model$pi[,1], rep(0,B_r)),col ="red")
plot(tmp$scale.model$probs[,2])
points(c(rep(0,B_l), fit$K_model$pi[,2], rep(0,B_r)),col ="red")
plot(y)
plot(fit$L_model$b[,1])
points(tmp$mean.model$b)
plot(fit$L_model$b[,1])
points(tmp$mean.model$b,col="red")
points(tmp$mean.model$b[,1],col="red")
plot(fit$L_model$b[,2])
points(tmp$mean.model$b[,2],col="red")
plot(fit$L_model$tau[,1])
points(tmp$mean.model$tau[,1],col="red")
plot(fit$L_model$tau[,2])
points(tmp$mean.model$tau[,2],col="red")
plot(fit$L_model$tau[,2])
points(tmp$mean.model$tau[,2],col="red")
plot(fit$L_model$tau[,1])
points(tmp$mean.model$tau[,1],col="red")
points(tmp$scale.model$tau[,1],col="red")
points(tmp$scale.model$u[,1],col="red")
plot(fit$K_model$u[,1])
points(tmp$scale.model$u[,1],col="red")
plot(fit$K_model$v[,1])
points(tmp$scale.model$v[,1],col="red")
plot(tmp$scale.model$v[,1],col="red")
points(fit$K_model$v[,1])
plot(tmp$scale.model$v[,2],col="red")
points(fit$K_model$v[,2])
y = rnorm(T+B_r+B_l, mean = mu, sd = 1); J = 0; L = 2; K = 2;
tmp=michR(y, J, L, K, fit.intercept = FALSE, fit.scale = FALSE, max_iter = max_iter, tol = -Inf, B_l = B_l, B_r=B_r)
fit = mich(y, J, L, K,
mich(y, J, L, K,
B_l, B_r, fit_intercept, fit_scale, max_iter, verbose = FALSE,
tau_j, u_j, v_j, pi_j,
tau_l, pi_l,
u_k, v_k, pi_k)
fit = mich(y, J, L, K,
B_l, B_r, fit_intercept, fit_scale,
max_iter, verbose = TRUE,
tau_j, u_j, v_j, pi_j,
tau_l, pi_l,
u_k, v_k, pi_k)
points(tmp$mean.model$tau[,1],col="red")
plot(fit$L_model$tau[,1])
points(tmp$mean.model$tau[,1],col="red")
K=0
fit = mich(y, J, L, K,
B_l, B_r, fit_intercept, fit_scale,
max_iter, verbose = TRUE,
tau_j, u_j, v_j, pi_j,
tau_l, pi_l,
u_k, v_k, pi_k)
tmp=michR(y, J, L, K, fit.intercept = FALSE, fit.scale = FALSE, max_iter = max_iter, tol = -Inf, B_l = B_l, B_r=B_r)
plot(fit$L_model$tau[,1])
points(tmp$mean.model$tau[,1],col="red")
points(tmp$mean.model$tau[,2],col="red")
plot(fit$L_model$tau[,2])
points(tmp$mean.model$tau[,2],col="red")
plot(fit$L_model$b[,1])
points(tmp$mean.model$ [,1],col="red")
points(tmp$mean.model$b[,1],col="red")
max_iter
max_iter=50000
fit = mich(y, J, L, K,
B_l, B_r, fit_intercept, fit_scale,
max_iter, verbose = TRUE,
tau_j, u_j, v_j, pi_j,
tau_l, pi_l,
u_k, v_k, pi_k)
tmp=michR(y, J, L, K, fit.intercept = FALSE, fit.scale = FALSE, max_iter = max_iter, tol = -Inf, B_l = B_l, B_r=B_r)
plot(fit$L_model$b[,1])
points(tmp$mean.model$b[,1],col="red")
plot(fit$L_model$tau[,1])
points(tmp$mean.model$tau[,1],col="red")
points(tmp$mean.model$tau[,2],col="red")
plot(fit$L_model$tau[,2])
points(tmp$mean.model$tau[,2],col="red")
plot(fit$L_model$ [,1])
plot(fit$L_model$b[,1])
points(tmp$mean.model$b[,1],col="red")
plot(fit$L_model$b[,2])
points(tmp$mean.model$b[,2],col="red")
plot(fit$L_model$pi[,1])
points(tmp$mean.model$pi[2:101,1],col="red")
points(tmp$mean.model$probs[2:101,1],col="red")
plot(fit$L_model$pi[,2])
points(tmp$mean.model$probs[2:101,2],col="red")
Rcpp::sourceCpp("Desktop/SUPR/mich.cpp")
Rcpp::sourceCpp("Desktop/SUPR/mich.cpp")
Rcpp::sourceCpp("Desktop/SUPR/mich.cpp")
Rcpp::sourceCpp("mich.cpp")
plot(fit$L_model$b[,2])
points(tmp$mean.model$b[,2],col="red")
tmp=michR(y, J, L, K, fit.intercept = FALSE, fit.scale = FALSE, max_iter = max_iter, tol = -Inf, B_l = B_l, B_r=B_r)
plot(fit$L_model$b[,2])
points(tmp$mean.model$b[,2],col="red")
plot(fit$L_model$b[,2], tmp$mean.model$b[,2])
plot(fit$L_model$b[,1], tmp$mean.model$b[,1])
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
plot(tmp$scale.model$probs[2:101,])
matplot(tmp$scale.model$probs[2:101,])
points(fit$K_model$pi[,2])
points(fit$K_model$pi[,1])
plot(fit$L_model$b[,1], tmp$mean.model$b[,1])
plot(fit$L_model$b[,2], tmp$mean.model$b[,2])
plot(fit$L_model$tau[,2], tmp$mean.model$tau[,2])
plot(fit$L_model$tau[,1], tmp$mean.model$tau[,1])
plot(fit$L_model$v[,1], tmp$mean.model$v[,1])
plot(fit$L_model$v[,1], tmp$scale.model$v[,1])
plot(fit$K_model$v[,1], tmp$scale.model$v[,1])
plot(fit$K_model$v[,2], tmp$scale.model$v[,2])
Rcpp::sourceCpp("mich.cpp")
plot(fit$K_model$v[,1], tmp$scale.model$v[,1])
plot(fit$K_model$v[,2], tmp$scale.model$v[,2])
plot(fit$K_model$pi[,1], tmp$scale.model$probs[2:101,1])
plot(fit$K_model$pi[,2], tmp$scale.model$probs[2:101,2])
plot(fit$K_model$v[,2], tmp$scale.model$v[,2])
plot(fit$K_model$v[,1], tmp$scale.model$v[,1])
plot(fit$L_model$tau[,1], tmp$mean.model$tau[,1])
plot(fit$L_model$b[,2], tmp$mean.model$b[,2])
plot(fit$L_model$tau[,2], tmp$mean.model$tau[,2])
plot(fit$L_model$b[,1], tmp$mean.model$b[,1])
plot(fit$L_model$pi[,2], tmp$mean.model$probs[2:101,2])
plot(fit$L_model$pi[,1], tmp$mean.model$probs[2:101,1])
matplot(fit$L_model$pi)
points(tmp$mean.model$probs[2:101,1])
points(tmp$mean.model$probs[2:101,2])
matplot(fit$K_model$pi)
points(tmp$scale.model$probs[2:101,2])
points(tmp$scale.model$probs[2:101,1])
Rcpp::sourceCpp("mich.cpp")
matplot(fit$K_model$pi)
points(tmp$scale.model$probs[2:101,1])
points(tmp$scale.model$probs[2:101,2])
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
plot(y)
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
Rcpp::sourceCpp("mich.cpp")
i=10
results %>%
filter(T == settings$T[i], L == settings$L[i], min_space == settings$min_space[i]) %>%
group_by(method, T, L, min_space) %>%
summarize("|L - L_hat|" = mean(abs(L - L_est)),
#"<= -2" = mean((L - L_est) <= -2),
#"= -1" = mean((L - L_est) == -1),
#"= 0" = mean((L - L_est) == 0),
#"= 1" = mean((L - L_est) == 1),
#">= 2" = mean((L - L_est) >= 2),
ci_length = sum(L_est * avg_len, na.rm = TRUE) / sum(L_est),
coverage = sum(n_covered, na.rm = TRUE) / sum(n_detected, na.rm = TRUE),
hausdorff = mean(hausdorff, na.rm = TRUE),
fpsle = mean(fpsle, na.rm = TRUE),
fnsle = mean(fnsle, na.rm = TRUE),
#mean_mse = mean(mean_mse, na.rm = TRUE),
#var_mse = mean(var_mse, na.rm = TRUE),
time = mean(time, na.rm = TRUE)) %>%
mutate_if(is.numeric, ~format(round(.,3), nsmall = 3)) %>%
arrange(T, L, min_space)
hsmuce_simulation(T, L, 200, min_space)
i=10
results %>%
filter(T == settings$T[i], L == settings$L[i], min_space == settings$min_space[i]) %>%
group_by(method, T, L, min_space) %>%
summarize("|L - L_hat|" = mean(abs(L - L_est)),
"<= -2" = mean((L - L_est) <= -2),
"= -1" = mean((L - L_est) == -1),
"= 0" = mean((L - L_est) == 0),
"= 1" = mean((L - L_est) == 1),
">= 2" = mean((L - L_est) >= 2),
ci_length = sum(L_est * avg_len, na.rm = TRUE) / sum(L_est),
coverage = sum(n_covered, na.rm = TRUE) / sum(n_detected, na.rm = TRUE),
hausdorff = mean(hausdorff, na.rm = TRUE),
fpsle = mean(fpsle, na.rm = TRUE),
fnsle = mean(fnsle, na.rm = TRUE),
#mean_mse = mean(mean_mse, na.rm = TRUE),
#var_mse = mean(var_mse, na.rm = TRUE),
time = mean(time, na.rm = TRUE)) %>%
mutate_if(is.numeric, ~format(round(.,3), nsmall = 3)) %>%
arrange(T, L, min_space)
i=1
i=1
results %>%
filter(T == settings$T[i], L == settings$L[i], min_space == settings$min_space[i]) %>%
group_by(method, T, L, min_space) %>%
summarize("|L - L_hat|" = mean(abs(L - L_est)),
"<= -2" = mean((L - L_est) <= -2),
"= -1" = mean((L - L_est) == -1),
"= 0" = mean((L - L_est) == 0),
"= 1" = mean((L - L_est) == 1),
">= 2" = mean((L - L_est) >= 2),
ci_length = sum(L_est * avg_len, na.rm = TRUE) / sum(L_est),
coverage = sum(n_covered, na.rm = TRUE) / sum(n_detected, na.rm = TRUE),
hausdorff = mean(hausdorff, na.rm = TRUE),
fpsle = mean(fpsle, na.rm = TRUE),
fnsle = mean(fnsle, na.rm = TRUE),
#mean_mse = mean(mean_mse, na.rm = TRUE),
#var_mse = mean(var_mse, na.rm = TRUE),
time = mean(time, na.rm = TRUE)) %>%
mutate_if(is.numeric, ~format(round(.,3), nsmall = 3)) %>%
arrange(T, L, min_space)
hsmuce_simulation(T, L, 200, min_space = 50 )
settings[i,]
plot(hsmuce_simulation(T = 100 , L = 2, 200, min_space = 15 )$y)
hsmuce_simulation(T = 100 , L = 2, 200, min_space = 15 )
#' Randomly draws K change-points uniformly distributed between 1:T subject
#' to a minimum spacing criterion
#'
#' @param T         An integer. Number of observations.
#' @param K         An integer. Number of change-points.
#' @param min_space An integer. The minimum spacing criterion between
#'                  change-points
#'
#' @return K change-points in 1:T.
#'
point_picker <- function(T, K, min_space) {
if (min_space * K > T) stop("T must be greater than K * min_space")
valid <- 1:T # current valid change-point locations
picked <- c()    # initialized sampled locations
for (k in 1:(K-1)) {
# sample change point from valid locations
picked <- c(picked, sample(valid, size = 1))
# update set of valid locations
valid <- valid[abs(valid - picked[k]) > min_space]
if (length(valid) < 1) {
return(point_picker(T, K, min_space))
}
}
if (length(valid) == 1) picked <- c(picked, valid)
else  picked <- c(picked, sample(valid, size = 1))
return(picked[order(picked)])
}
hsmuce_simulation <- function(T, K, C, min_space, B_l=1, B_r=B_l) {
# sample change-points
chp <- point_picker(T-B_l-B_r, K, min_space) + B_l
# sample variances
s <- c(1, 2^runif(K, -2, 2))
# generate means and signal
mu <- numeric(K + 1)
blks <- diff(c(1, chp, T+1))
y <- rnorm(blks[1])
for (k in 1:K) {
jump <- sqrt(C / min(blks[k+1] / s[k+1]^2, blks[k] / s[k]^2))
mu[k+1] <- mu[k] + sample(c(-1,1), 1) * jump
y <- c(y, rnorm(blks[k+1], mean = mu[k+1], sd = s[k+1]))
}
rep(mu, blks)
return(list(y = y,
mu = mu,
s = s,
changepoints = chp,
mean_signal = rep(mu, blks),
var_signal = rep(s^2, blks)
)
)
}
hsmuce_simulation(T = 100 , L = 2, 200, min_space = 15 )
hsmuce_simulation(T = 100 , K = 2, 200, min_space = 15 )
plot(hsmuce_simulation(T = 100 , K = 2, 200, min_space = 15 )$y)
plot(hsmuce_simulation(T = 100 , K = 2, 200, min_space = 15 )$y)
plot(hsmuce_simulation(T = 100 , K = 2, 200, min_space = 15 )$y)
plot(hsmuce_simulation(T = 100 , K = 2, 200, min_space = 15 )$y)
plot(hsmuce_simulation(T = 100 , K = 2, 200, min_space = 15 )$y)
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
fit
Rcpp::sourceCpp("~/tmp.cpp")
fit
matplot(fit$L_model$pi)
plot(y)
matplot(fit$L_model$pi)
plot(y)
matplot(fit$L_model$pi)
Rcpp::sourceCpp("~/tmp.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
matplot(fit$L_model$pi)
plot(y)
Rcpp::sourceCpp("~/tmp.cpp")
plot(y)
matplot(fit$L_model$pi)
Rcpp::sourceCpp("~/tmp.cpp")
matplot(fit$L_model$pi)
plot(y)
Rcpp::sourceCpp("~/tmp.cpp")
plot(fit$r)
smcp(fit$r, lambda, log(pi_l[,1]), B_r = )
smcp(fit$r, lambda, log(pi_l[,1]), B_r)
smcp(fit$r, lambda, log(pi_l[,1]), B_r)
smcp(fit$r, lambda, 0.1, log(pi_l[,1]), B_r)
plot(smcp(fit$r, lambda, 0.1, log(pi_l[,1]), B_r)$pi)
plot(fit$r)
plot(smcp(y, lambda, 0.1, log(pi_l[,1]), B_r)$pi)
fit = smcp(y, lambda, 0.1, log(pi_l[,1]), B_r)
cumsum(fit$pi * fit$mu)
plot(y - cumsum(fit$pi * fit$mu))
plot(y - c(cumsum(fit$pi * fit$mu), cumsum(fit$pi * fit$mu)[T]))
plot(y)
lines(cumsum(fit$pi * fit$mu))
y = y - c(cumsum(fit$pi * fit$mu), cumsum(fit$pi * fit$mu)[T])
fit = smcp(y, lambda, 0.1, log(pi_l[,1]), B_r)
plot(y)
lines(cumsum(fit$pi * fit$mu))
y = y - c(cumsum(fit$pi * fit$mu), cumsum(fit$pi * fit$mu)[T])
plot(y)
fit = smcp(y, lambda, 0.1, log(pi_l[,1]), B_r)
plot(y)
lines(cumsum(fit$pi * fit$mu))
y = y - c(cumsum(fit$pi * fit$mu), cumsum(fit$pi * fit$mu)[T])
fit = smcp(y, lambda, 0.1, log(pi_l[,1]), B_r)
lines(cumsum(fit$pi * fit$mu))
plot(y)
lines(cumsum(fit$pi * fit$mu))
y = y - c(cumsum(fit$pi * fit$mu), cumsum(fit$pi * fit$mu)[T])
fit = smcp(y, lambda, 0.1, log(pi_l[,1]), B_r)
plot(y)
lines(cumsum(fit$pi * fit$mu))
plot(y)
Rcpp::sourceCpp("~/tmp.cpp")
matplot(fit$L_model$pi)
plot(cumsum(fit$L_model$pi[,1] * fit$L_model$b[,1]))
plot(y)
lines(cumsum(fit$L_model$pi[,1] * fit$L_model$b[,1]))
lines(cumsum(fit$L_model$pi[,2] * fit$L_model$b[,2]))
Rcpp::sourceCpp("scp_functions.cpp")
Rcpp::sourceCpp("~/tmp.cpp")
